** o2oUtilities version 3


Proc InitTracks
Echo o2o Utility - Set all  ~ tracks to null

Let jIDs = $Layout(IDSet, TrackIDs)
Let i = 0
While(@i < $Set(@jIDs, Count))
  Let jTrackID = $Set(@jIDs, Get, @i)
  If($TRACK(@jTrackID, Label) = "<>")
    Let $TRACK(@jTrackID, Label) = ""
  EndIf
  Let i = @i + 1
EndWhile
Echo InitTracks Complete

EndProc
****************************************************************************

Proc InitCars
Echo o2o Utility - Set all car destinations to their current location

  If(%1 = "")
    Let jXmessage = $Set(@messageBundle, Get, 8)
    Let jX = $Msgbox("YN", @jXmessage)
    If (@jX = 1)
      Let jLabels = $Layout(IDSet, CarLabels) ** all trains on layout
      Echo o2o Utility - set all rolling stock locations
    Else
      Let jLabels = $Train($Train, CarIDs) ** selected train
      Echo o2o Utility - set locations for selected train
    EndIf
  Else
    Let jLabels = %1 ** passed in train label set
    Let jX = 0
  EndIf

  While($Set(@jLabels, Count) <> 0)
    Let jTemp = $String(@jLabels, NextToken) ** car label
    Let jCarLoc = $Car(@jTemp, Track) ** track ID
    Let jCarLoc = $Track(@jCarLoc, Label) ** track label

    Let $Car(@jTemp, Dest) = @jCarLoc

** Set the car to AO Industries load and state
    Let jInds = $Ops(find, Industries.Industry, @jCarLoc)
    If(@jinds = "")
      Let $Car(@jTemp, Loaded) = 0
    EndIf
    While($String(@jInds, Length) <> 0)
      Let id = $String(@jInds, NextToken)
      let aar = $Ops(get, Industries.AAR, @id)
      If($Car(@jTemp, AAR) = @aar)
        Let jLoad = $Ops(get, Industries.Load, @id)
        Let $Car(@jTemp, Loadname) = @jLoad
        Let $Car(@jTemp, Loaded) = 0
        Let sr = $Ops(get, Industries.S/R, @id)
          If(@sr = "R")
            Let $Car(@jTemp, Loaded) = 0
          EndIf
      EndIf
    EndWhile

** Set cars on unlabeled tracks
    If (@jCarLoc = "") ** track is unlabeled
      Let $Car(@jTemp, Dest) = "~"
      Continue
    EndIf

    If (@TagNonRevenue = 1)
      Continue
    EndIf

** Exclude locos and cabin cars if "TagNonRevenue" = 0
    Let eqptAar = $Car(@jTemp, AAR)

    If ($string(@eqptAar, startswith, "E") = 1)
      Let $Car(@jTemp, Dest) = "~"
    EndIf

    If ($string(@eqptAar, startswith, "N") = 1)
      Let $Car(@jTemp, Dest) = "~"
    EndIf

  EndWhile
  View Refresh
  Echo InitCars Complete

EndProc
****************************************************************************

Proc AddKernels
Echo o2o Utility - Group equipment together into a JMRI like consist or kernel

  Let jKernelSet = $Train($Train, CarLabels)
  Input jK $Set(@messageBundle, Get, 7)
  While($Set(@jKernelSet, Count) <> 0)
    Let jCar = $String(@jKernelSet,  NextToken)
    Let $Car(@jCar, kernel) = @jK
    Echo @jK @jCar
  EndWhile

EndProc
****************************************************************************

Proc TrackReport
Echo o2o Utility - Report track capacity by car quantity

  Let tcReport = $Set(@o2oBundle, Get, 19) + \n\n
  Let allLocales = $Ops(Find, Locations.ID, All)
  Let allLocalesCount = $Set(@allLocales, Count)
  Let trackData = ""
  Let i = 1
  While (i <= @allLocalesCount)

    Let locale = $Ops(Get, Locations.Locale, @i)
    Let label = $Ops(Get, Locations.Track, @i)
    Let lineData = @locale + ";" + @label
    Let trackData = @trackData + @lineData + ','

    Let i = @i + 1
  EndWhile

  Let trackData = $Set(@trackData, Sort)
  
  While($Set(@trackData, Count) <> 0)

    Let currentLine = $String(@trackData, NextToken, ",")
    Let currentLocation = $String(@currentLine, NextToken, ";")
    Let currentTrack = $String(@currentLine, NextToken, ";")
    Let currentLabel = @currentLine
    Let currentCapacity = $CAPAC(@currentLabel, All)

    Let tcReport = @tcReport + @currentLocation + ' ' + @currentTrack + ' - ' + @currentCapacity + \n

  EndWhile

  Let tcReport = @tcReport + \n\n + $Set(@o2oBundle, Get, 20) + \n

EndProc
****************************************************************************

Proc ReportTpLocations
Echo o2o Utility - create TrainPlayer Report - Locations.txt

  Let jID = $Ops(find, Locs.Class, All, ID)
  Let jCount = $Set(@jID, Count)

  Let jLocation = $DATE + "-" + $TIME + ";" + $Layout(Name) + ";;;;"
  If ($String(@OperatingRoad, Length) = 0)
    Let OperatingRoad = $Layout(Name)
  EndIf
  Let jLocation = @jLocation +\n@OperatingRoad + ";" + @Territory + ";" + @Location + ";" + @Year + ";" + @Divisions + ";" + @ModelScale

  Let jLocation = @jLocation +\n + ";;;;;"
  Let jLocation = @jLocation +\n + ";;;;;"
  Let jLocation = @jLocation +\n + ";;;;;"

  Let i = 1
  While (i <= @jCount)

    Let thisTrack = $Ops(Get, Locs.Track, @i)

    If($Ops(Get, Locs.Class, @i) = "industry")
      Let cap = $Ops(Get, Locs.VacantSpots, @i)
      If (@cap = 0)
        Let cap = $Capac(@thisTrack, all)
      EndIf
    EndIf

    If($Ops(Get, Locs.Class, @i) <> "industry")
      Let cap = $Capac(@thisTrack, all)
    EndIf
    
    Let jLine = $Ops(Get, Locations.ID, @i) + ";" + $Ops(Get, Locs.Locale, @i) + ";" + @thisTrack + ";" + $Ops(Get, Locs.Class, @i) + ";" + @cap

  ** Test that the semi colon is in a valid place
    Let jTest = $Ops(Get, Locs.Locale, @i)
    Let kTest = $String(@jTest, NextToken, ";")
    If (@jTest = "")
      Let message = $Ops(Get, Locs.Locale, @i) + \n$Set(@messageBundle, Get, 23)
      Call $Msgbox(@message)
    EndIf
    If (@kTest = "")
      Let message = $Ops(Get, Locs.Locale, @i) + \n$Set(@messageBundle, Get, 22)
      Call $Msgbox(@message)
    EndIf

** Test that the line has 5 semi colons
    Let j = 0
    Let jTest = @jLine
    If ($String(@jTest, EndsWith, ;) = 1)
      Let jTest = @jTest + 1
    EndIf
    While (1 = 1)
        Call $String(@jTest, NextToken, ";")
        If (@jTest = "")
          Break
        EndIf
        Let j = @j + 1
    EndWhile

    If (@j <> 5)
      Let message = $Ops(Get, Locs.Locale, @i) + \n$Set(@messageBundle, Get, 21)
      Call $Msgbox(@message)
    EndIf

    Let jLocation = @jLocation + \n@jLine
    Let i = @i + 1

  EndWhile

  Let jLocationLoc = $DataDir + "\Reports\TrainPlayer Report - Locations.txt"
  Call $Write(@jLocationLoc, @jLocation)

  Echo Location count: @jCount

EndProc
****************************************************************************

Proc ReportTpIndustries
Echo o2o Utility - create TrainPlayer Report - Industries.txt

  Let jID = $Ops(find, Industries.Locale, All, ID)
  Let jCount = $Set(@jID, Count)

  Let jIndustry = $DATE + "-" + $TIME + ";;;;;;;;;;"
  Let jIndustry = @jIndustry + \n + "JMRI Location;JMRI Track;TP Industry;TP AAR;TP S/R;Load;TP Staging;TP ViaIn;TP Via Out;TP ID;"
  Let jIndustry = @jIndustry + \n + ";;;;;;;;;;"
  Let jIndustry = @jIndustry + \n + ";;;;;;;;;;"
  Let jIndustry = @jIndustry + \n + ";;;;;;;;;;"
  
  Let i = 1
  While (i <= @jCount)

    Let jLine = $Ops(Get, ind.Locale, @i) + ";" + $Ops(Get, ind.Industry, @i) + ";" + $Ops(Get, ind.AAR, @i) + ";" + $Ops(Get, ind.S/R, @i) + ";" + $Ops(Get, ind.Load, @i) + ";" + $Ops(Get, ind.Staging, @i) + ";" + $Ops(Get, ind.ViaIn, @i) + ";" + $Ops(Get, ind.ViaOut, @i) + ";" + $Ops(Get, ind.ID, @i) + ";"
** Test that the line has 9 semi colons
    Let j = 0
    Let jTest = @jLine
    While (1 = 1)
        Call $String(@jTest, NextToken, ";")
        If (@jTest = "")
          Break
        EndIf
        Let j = @j + 1
    EndWhile

    If (@j <> 9)
      Let message = "Track label " + $Ops(Get, ind.Industry, @i) + \n$Set(@messageBundle, Get, 24)
      Call $Msgbox(@message)
    EndIf

    Let jIndustry = @jIndustry + \n@jLine
    Let i = @i + 1

  EndWhile

  Let jIndustryyLoc = $DataDir + "\Reports\TrainPlayer Report - Industries.txt"
  Call $Write(@jIndustryyLoc, @jIndustry)

  Echo Industry count: @jCount

EndProc
****************************************************************************

Proc ReportTpInventory
Echo o2o Utility - create TrainPlayer Report - Rolling Stock.txt

  Echo Working on it......

  Let jID = $Ops(find, Cars.Car, All, Car)
  Let jCount = $Set(@jID, Count)

  Let jInventory = "Engine AAR;" + @Aar_engine + ";;;;;;"
  Let jInventory = @jInventory + \n + "Caboose AAR;" + @Aar_caboose + ";;;;;;"
  Let jInventory = @jInventory + \n + "MOW AAR;" + @Aar_mow + ";;;;;;"
  Let jInventory = @jInventory + \n + "Passenger AAR;" + @Aar_passenger + ";;;;;;"
  Let jInventory = @jInventory + \n + "Express AAR;" + @Aar_express + ";;;;;;"
  Let jInventory = @jInventory + \n + ";;;;;;;\n"
  Let jInventory = @jInventory + ";;;;;;;\n"
  Let jInventory = @jInventory + ";;;;;;;\n"

  Let i = 1
  While (i <= @jCount)

    Let jCar = $Ops(Get, Cars.Car, @i)
    Let jKernel = $Car(@jCar, kernel)

    Let jTrack = $Ops(Get, Cars.Location, @i)
    Let jLocale = $Ops(Find, Locs.Track, @jTrack)
    Let jLocale = $Ops(Get, Locs.Locale, @jLocale)
    If(@jTrack = "~")
      Let jLocale = "Unreported;~"
    EndIf
    If(@jTrack = "")
      Let jLocale = "Unreported;~"
    EndIf

    If(@jLocale = "")
      Let jLocale = "Unreported;~"
    EndIf


    Let carAAR = $Ops(Get, Cars.AAR, @i)
    If (carAAR = "EQDK")
      Let i = @i + 1
      Continue
    EndIf
    Let jInventory = @jInventory + @jCar + ";" + $Ops(Get, Cars.Type, @i) + ";" + $Ops(Get, Cars.AAR, @i) + ";" +  @jLocale + ";" + $Ops(Get, Cars.Load, @i) + ";" + @jKernel + ";" + $Car(@jCar, Car_ID)
    If (@i < @jCount)
      Let jInventory = @jInventory + \n
    EndIf

    Let i = @i + 1

  EndWhile

  Let jInventoryLoc = $DataDir + "\Reports\TrainPlayer Report - Rolling Stock.txt"
  Call $Write(@jInventoryLoc, @jInventory)

  Echo Rolling stock count: @jCount

EndProc
****************************************************************************
