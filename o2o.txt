** o2o version 3


If (%1 = SetUp)

  Let x5 = 1
  Let jResetCarIDs = ""
  Let jManifestAll = ""
  Let jLocList = "Location List,"

  Call o2oUtilities

  Echo o2o Version 3

EndIf

****************************************************************************

Proc o2oDisplayWorkList

  If(@jManifestAll = "") ** if manifest is not read in, set to default.
    Let jNote = \n$Set(@o2oBundle, Get, 0)\n\n$Set(@o2oBundle, Get, 1)\n\n$Set(@o2oBundle, Get, 2) \n
  EndIf
  If (@L = 0)
    Let L = 1
    Call NoteWindow @jNote 1
  Else
    Let L = 0
    Call NoteWindow
  EndIf
  Let H = 0
  Let U = 0
        
EndProc
****************************************************************************

Proc o2oReadManifest

  Let U = 1 ** So ProcY is not run when Y is pressed
  
  Let jMessage = $Set(@messageBundle, Get, 11) ** Read in jManifest
  Let jManifest = $Msgbox(YN, @jMessage)
  If (@jManifest = 0)
    Let $Key = 0
    Exit
  Endif

  ** Create a location matrix from the AO location dataset
  Call ReadAoLocations

  Let jReportManifest = $DataDir + "\Reports\JMRI Report - o2o Workevents.csv"
  Let jManifestAll = $Read(@jReportManifest)
  Call CreateReportHeader

  Let jNote = \n$Set(@o2oBundle, Get, 0)\n\n$Set(@o2oBundle, Get, 3) \n
  Call NoteWindow @jNote 1
  Echo Read in manifest
  Let jWEIndex = 1
  Call IncrementWE
  View Refresh

  Let U = 0

EndProc
****************************************************************************

Proc ResetPreviousWorkEvent

  Echo Reset previous WorkEvent cars

  While($Set(@jResetCarIDs, Count) <> 0)
    Let jCarID = $String(@jResetCarIDs, NextToken)
    Let $Car(@jCarID, Dest) = ~
    Let $Car(@jCarID, ExcludeOps) = 0
  EndWhile
  View Refresh

EndProc
****************************************************************************

Proc CreateReportHeader

  Echo Find the number of WorkEvents for the manifest
  ** And extract the manifest header

  Let jManifestCopy = @jManifestAll
  Let j = 1
  Let jEventSet = ""

  Let jTemp = $String(@jManifestCopy, NextToken, @xCR)  ** RR name
  If($String(@jTemp, StartsWith, "HN") = 1)
    Call $String(@jTemp, NextToken)
  Else
    Let jTemp = "Railroad name not found"
  Endif

** The JMRI jPlus sub separates header items with a semi colon
  Let jHeader = ""
  While ($String(@jTemp, Length) <> 0)
    Let jHeader = @jHeader + $String(@jTemp, NextToken, ";") + "\n"
  EndWhile

  Let jTemp = $String(@jManifestCopy, NextToken, @xCR)  ** Train name
  If($String(@jTemp, StartsWith, "HT") = 1)
    Call $String(@jTemp, NextToken)
  Else
    Let jTemp = "Train name not found"
  Endif
  If($String(@jTemp, Length) <> 0)
    Let jHeader = @jHeader + \n@jTemp
  EndIf

  Let jTemp = $String(@jManifestCopy, NextToken, @xCR)  ** Train description
  If($String(@jTemp, StartsWith, "HD") = 1)
    Call $String(@jTemp, NextToken)
  Else
    Let jTemp = "Train description not found"
  Endif
  If($String(@jTemp, Length) <> 0)
    Let jHeader = @jHeader + \n@jTemp
  EndIf

  Let jTemp = $String(@jManifestCopy, NextToken, @xCR)  ** Valid time
  If($String(@jTemp, StartsWith, "HV") = 1)
    Call $String(@jTemp, NextToken)
  Else
    Let jTemp = "Train time stamp not found"
  Endif
  Let jHeader = @jHeader + \n@jTemp

  **** Train comment is not in the JMRI train.json file.
  Let jTemp = $String(@jManifestCopy, NextToken, @xCR)  ** Train comment
  If($String(@jTemp, StartsWith, "HC") = 1)
    Call $String(@jTemp, NextToken)
  Else
    Let jTemp = "Train comment not found"
  Endif
  If($String(@jTemp, Length) <> 0)
    Let jHeader = @jHeader + \n@jTemp
  EndIf
  
  Let jTemp = $String(@jManifestCopy, NextToken, @xCR)  ** Work event total
  If($String(@jTemp, StartsWith, "WT") = 1)
    Call $String(@jTemp, NextToken)
    Let jWETotal = @jTemp
  Else
    Echo "Total number of work events unknown"
    Let jWETotal = 0
  Endif

  Echo There are @jWETotal WorkEvents

EndProc
****************************************************************************

Proc ParseManifest ** Parse the whole manifest from JMRI

  Let PickUpCount = 0
  Let SetOutCount = 0
  Let jMText = ""
  Let jManifestCopy = @jManifestAll
  Let jWE = ""

  While($Set(@jmanifestCopy, Count) > 0)

    Let jLine = $String(@jManifestCopy, NextToken, @xCR)

    Let j1 = $String(@jLine, NextToken) ** action to be taken WE PU SO PL SL

    If(@j1 = "WE")
      Let jWE = $String(@jLine, NextToken) ** Work Event
      Let jWL = $String(@jLine, NextToken) ** Work Location
      Echo WorkEvent @jWE @jWL
      Continue
    EndIf

    If(@jWE = @jWEIndex)
      Let jWEN = @jWL
      Call ParseLine

      If(@j1 = "PC")
        Call TagCar
        Call PickUpCar
        Call LoadCar
        Let PickUpCount = @PickUpCount + 1
      EndIf

      If(@j1 = "SC")
        Call TagCar
        Call SetOutCar
        Let SetOutCount = @SetOutCount + 1
      EndIf

      If(@j1 = "PL")
        Call TagCar
        Call PickUpLoco
      EndIf

      If(@j1 = "SL")
        Call TagCar
        Call SetOutLoco
      EndIf

    EndIf

  EndWhile

  Echo Current WorkEvent processed

EndProc
****************************************************************************

Proc ParseLine ** (All Cars) parse out all variables for each car in the manifest and format for switch list

  ** jNumbers are for switchlist
  ** "format:PC,25,NYC,69133,XM,L,cement,Harlem River;Car Barge,HTC;Cement House"
  ** "       j1,j2,j3 ,j4   ,j5,j6,j7   ,j8                    ,j9   "

  Let jID = $String(@jLine, NextToken)

  Let j2 = @jID + "     "
  Let j2 = $Substr(0, 3, @j2) ** truncate to 3 char

  Let jRoad = $String(@jLine, NextToken)
  Let j3 = @jRoad + "          "
  Let j3 = $Substr(0, 6, @j3) ** truncate to 6 char

  Let jNumber = $String(@jLine, NextToken)
  Let j4 = @jNumber + "          "
  Let j4 = $Substr(0, 6, @j4) ** truncate to 6 char

  Let jType = $String(@jLine, NextToken) ** Car Type
  Let j5 = @jType + "   "
  Let j5 = $Substr(0, 3, @j5) ** truncate to 3 char

  Let jLT = $String(@jLine, NextToken) ** Load Type
  Let j6 = @jLT

  Let jLoad = $String(@jLine, NextToken) ** Load
  Let j7 = @jLoad + "                    "
  Let j7 = $Substr(0, 12, @j7) ** truncate to 12 char

  Let jFromLoc = $String(@jLine, NextToken) ** From locale
  Let j8 = @jFromLoc + "                             "
  Let j8 = $Substr(0, 20, @j8) ** truncate to 20 char

  Let jToLoc = @jLine ** To locale
  Let j9 = @jToLoc + "                             "
  Let j9 = $Substr(0, 20, @j9) ** truncate to 20 char

EndProc
****************************************************************************

Proc TagCar

  Let jLocaleIndex = $Set(@jLocaleSet, Find, @jToLoc)
  Let jTag = $Set(@jTrackLabelSet, Get, @jLocaleIndex)
  Let jResetCarIDs = @jResetCarIDs + @jID + ","

  Let $Car(@jID, Dest) = @jTag
  If (@TagNonRevenue = 0)
    Let carAAR = $Car(@jID, AAR)
    If($String(@carAAR, StartsWith, "E") = 1)
      Let $Car(@jID, Dest) = "~"
    EndIf

    If($String(@carAAR, StartsWith, "N") = 1)
      Let $Car(@jID, Dest) = "~"
    EndIf

    If($String(@carAAR, StartsWith, "M") = 1)
      Let $Car(@jID, Dest) = "~"
    EndIf  
  EndIf

EndProc
****************************************************************************

Proc PickupCar ** Tag the TP car to be picked up

  ** Note adding a whitespace between variables adds a whitespace to the report.

  Let jMText = @jMText + \n$Set(@o2oBundle, Get, 17) @j3 @j4 @j5 @j6 @j7 $Set(@o2oBundle, Get, 15) @j8
  Let $Car(@jID, ExcludeOps) = 0 ** set the tags color

EndProc
****************************************************************************

Proc SetoutCar ** Tag the TP car to be set out

  Let jMText = @jMText + \n$Set(@o2oBundle, Get, 18) @j3 @j4 @j5 @j6 @j7 $Set(@o2oBundle, Get, 16) @j9
  Let $Car(@jID, ExcludeOps) = 1

EndProc
****************************************************************************

Proc PickUpLoco ** Tag the engine to be picked up

  Let jMText = @jMText + \n$Set(@o2oBundle, Get, 17) @j3 @j4 @j5 @j6 @j7 $Set(@o2oBundle, Get, 15) @j8
  Let $Car(@jID, ExcludeOps) = 0 ** set the tags color

EndProc
****************************************************************************

Proc SetOutLoco ** Tag the engine to be set out

  Let jMText = @jMText + \n$Set(@o2oBundle, Get, 18) @j3 @j4 @j5 @j6 @j7 $Set(@o2oBundle, Get, 16) @j9
  Let $Car(@jID, ExcludeOps) = 1 ** set the tags color

EndProc
****************************************************************************

Proc LoadCar

Let $Car(@jID, LoadName) = @jLoad

Let $Car(@jID, Loaded) = 1
If (@jLT = L)
  Let $Car(@jID, Loaded) = 0
EndIf

EndProc
****************************************************************************

Proc ReadAoLocations

  Echo Read the AO location dataset for this layout

  Let jTemp = $Ops(Find, Locations.Locale, All) ** returns indices
  Let jLocaleSet = $Ops(Get, Locations.Locale, @jTemp) ** set of all locales
  Let jTrackLabelSet = $Ops(Find, Locations.Track, All, Track) ** set of all track labels

EndProc
****************************************************************************

Proc IncrementWE

  Call ResetPreviousWorkEvent
  Let jResetCarIDs = ""

  Call ParseManifest

  Let jNote = @jHeader \n$Set(@o2oBundle, Get, 4) @jWEN \n$Set(@o2oBundle, Get, 13) @jWEIndex $Set(@o2oBundle, Get, 14) @jWETotal \n@jMText \n\n@PickUpCount $Set(@o2oBundle, Get, 5) @SetOutCount $Set(@o2oBundle, Get, 6) \n
  Call NoteWindow @jNote 1
  Let L = 1

EndProc
****************************************************************************

Proc o2oNextWorkEvent

  If(@jWEIndex = 1)
    Let jMessage = $Set(@messageBundle, Get, 9)
    Call $Msgbox(@jMessage)
  Else
    Let jNote = @jHeader \n\n$Set(@o2oBundle, Get, 9)\n\n$Set(@o2oBundle, Get, 11)\n$Set(@o2oBundle, Get, 12)\n
    Call NoteWindow @jNote 1
    Echo Move to previous WorkEvent
    Let jWEIndex = @jWEIndex - 1

    Call IncrementWE
    View Refresh
  EndIf

EndProc
****************************************************************************

Proc o2oPreviousWorkEvent

  If(@jWEIndex = @jWETotal)
    Let jMessage = $Set(@messageBundle, Get, 10)
    Call $Msgbox(@jMessage)
  Else
    Let jNote = @jHeader \n\n$Set(@o2oBundle, Get, 8)\n\n$Set(@o2oBundle, Get, 11)\n$Set(@o2oBundle, Get, 12)\n
    Call NoteWindow @jNote 1
    Echo Move to next WorkEvent
    Let jWEIndex = @jWEIndex + 1

    Call IncrementWE
    Echo j work event Index @jWEIndex
    View Refresh
  EndIf

EndProc
****************************************************************************

Proc o2oLastWorkEvent

  If(@jWEIndex = @jWETotal)
    Let jMessage = $Set(@messageBundle, Get, 10)
    Call $Msgbox(@jMessage)
  Else
    Let jNote = @jHeader \n\n$Set(@o2oBundle, Get, 10)\n\n$Set(@o2oBundle, Get, 11)\n$Set(@o2oBundle, Get, 12)\n
    Call NoteWindow @jNote 1
    Echo Move to last WorkEvent
    Let jWEIndex = @jWETotal

    Call IncrementWE
    View Refresh
  EndIf

EndProc
****************************************************************************

Proc o2oFirstWorkEvent

  If(@jWEIndex = 1)
    Let jMessage = $Set(@messageBundle, Get, 9)
    Call $Msgbox(@jMessage)
  Else
    Let jNote = @jHeader \n\n$Set(@o2oBundle, Get, 7)\n\n$Set(@o2oBundle, Get, 11)\n$Set(@o2oBundle, Get, 12)\n
    Call NoteWindow @jNote 1
    Echo Move to first WorkEvent
    Let jWEIndex = 1

    Call IncrementWE
    View Refresh
  EndIf

EndProc
****************************************************************************
