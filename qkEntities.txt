** qkEntities version 2


Proc NoteWindow
** Open or close the note window

If (%2 = 1) ** force window open
  Note %1
Else
  Note %1
EndIf

EndProc
***************************************************************************

Proc ApplyVersionItems
** Apply TrainPlayer version specific stuff

  Let Version = $Setting(InstalledVer)

  If ($String(@Version, StartsWith, 7) = 1)
    Let ViewList = @ViewList7
  EndIf
  If ($String(@Version, StartsWith, 8) = 1)
    Let ViewList = @ViewList8
  EndIf

EndProc
****************************************************************************

Proc aoAdjustments
** Turn off AO display of track attributes

    Call $View(Hide,"Track Labels")
    Call $View(hide,rails)
    Call $View(hide,roadbed)
    Call $View(hide,ties)
    Call $View(hide,tracks)

EndProc
***************************************************************************

Proc SetLanguage
** Read the bundle files for the chosen language

** Read in text for Quick Keys help page
  Let BundleLocation = $DataDir + "\Subroutines\QuickKeys\qkBundle\" + %1 + "\Help.txt"
  Let helpBundle = $Read(@BundleLocation)

** Read in text for Quick Keys pop up messages
  Let BundleLocation = $DataDir + "\Subroutines\QuickKeys\qkBundle\" + %1 + "\Message.txt"
  Let messageBundle = $Read(@BundleLocation)

** Read in text for Quick Keys utility menu
  Let BundleLocation = $DataDir + "\Subroutines\QuickKeys\qkBundle\" + %1 + "\Utility.txt"
  Let utilityBundle = $Read(@BundleLocation)

** Read in text for o2o reports
  Let BundleLocation = $DataDir + "\Subroutines\QuickKeys\qkBundle\" + %1 + "\o2o.txt"
  Let o2oBundle = $Read(@BundleLocation)

** Read in text for the welcome message
  Let BundleLocation = $DataDir + "\Subroutines\QuickKeys\qkBundle\" + %1 + "\Welcome.txt"
  Let welcBundle = $Read(@BundleLocation)

EndProc
***************************************************************************

Proc makeHelpPage
** Includes active subroutines only

  Let helpPage = ""

  If (@x0 = 0) ** All of Quick Keys is off

    Let helpPage = @helpPage \n$Set(@helpBundle, Get, 0)

  EndIf

  If (@x0 = 1) ** All of Quick Keys is on

    Let helpPage = @helpPage \n$Set(@helpBundle, Get, 1)
    If (@x1 = 1)
      If (@x2 = 0)
        Let helpPage = @helpPage $Set(@helpBundle, Get, 2)
      EndIf
      If (@x2 = 1)
        Let helpPage = @helpPage $Set(@helpBundle, Get, 3)
      EndIf
    EndIf
    If (@x3 = 1)
      Let helpPage = @helpPage $Set(@helpBundle, Get, 4)
    EndIf
    If (@x4 = 1)
      Let helpPage = @helpPage $Set(@helpBundle, Get, 5)
    EndIf
    If (@x5 = 1)
      Let helpPage = @helpPage $Set(@helpBundle, Get, 6)
    EndIf
    If (@x6 = 1)
      Let helpPage = @helpPage $Set(@helpBundle, Get, 7)
    EndIf

  EndIf

EndProc
***************************************************************************

Proc makeUtilityMenu
** Includes active subroutines only

  Let utilityMenu = ""

  If (@x0 = 0) ** All of Quick Keys is off

    Let utilityMenu = \n$Set(@utilityBundle, Get, 0)

  EndIf

  If (@x0 = 1) ** All of Quick Keys is on

    Let utilityMenu = $Set(@utilityBundle, Get, 1) ** Header

    If (@x1 = 1) ** Speed Switching is activated
      If (@x2 = 0) ** Phake Physics is off
        Let utilityMenu = @utilityMenu + $Set(@utilityBundle, Get, 2)
      EndIf
      If (@x2 = 1) ** Phake Physics is on
        Let utilityMenu = @utilityMenu + $Set(@utilityBundle, Get, 3)
      EndIf
    EndIf

    Let utilityMenu = @utilityMenu + $Set(@utilityBundle, Get, 4) ** Add Personalized Settings
    Let utilityMenu = @utilityMenu + $Set(@utilityBundle, Get, 5) ** Add RandomRoads template
    Let utilityMenu = @utilityMenu + $Set(@utilityBundle, Get, 6) ** Apply RandomRoads

    If (@x5 = 1)
      Let utilityMenu = @utilityMenu + $Set(@utilityBundle, Get, 7)
    EndIf

  EndIf

  Let utilityMenu = @utilityMenu + \n\n$Set(@utilityBundle, Get, 9) \n ** Footer

EndProc
***************************************************************************

Proc MakePersonalizedSettings
** Makes the personalized settings note into a subroutine

  Let settingsNote = $Note(@NoteForPersonalizedSettings)
  Let settingsFile = $DATADIR + "\Subroutines\QuickKeys\PersonalizedSettings.txt"

  If (@NoteForPersonalizedSettings = 0)
    Let settingsNote = $Note(No note is mapped to personalized settings)
    Echo No note is mapped to personalized settings
  EndIf

  Call $Write(@settingsFile, @settingsNote)

EndProc
***************************************************************************

Proc MakeProcXYZ
** Make the code snippet in the selected SC notes into a subroutine

  Let xyzPrefix = PressX PressY PressZ
  Let xyzNoteNumber = @NoteForPressX @NoteForPressY @NoteForPressZ
  Let i = 0
  While (@i < 3)

    Let procNoteNumber = $Set(@xyzNoteNumber, get, @i)
    Let procFileName = $DATADIR + "\Subroutines\QuickKeys\" + $Set(@xyzPrefix, get, @i) + ".txt"
    Let procNoteContents = $Note(@procNoteNumber)
    If (@procNoteNumber = 0)
      Let procNoteContents = "Echo No script is mapped to this key press"
    EndIf

    Call $Write(@procFileName, @procNoteContents)

    Let i = @i + 1

  EndWhile

EndProc
***************************************************************************

Proc CopyPersonalizedSettings
** Make the code snippet in the selected SC note into the personalized settings script

** Input a note number
  Input noteId $Set(@messageBundle, Get, 20)

** Read in the PersonalizedSettings template
  Let rrTemplate = $DataDir + "\Subroutines\QuickKeys\qkSupport\PersonalizedSettings.txt"
  Let rrText = $Read(@rrTemplate)

** Copy to note
  Let $Note(@noteId) = @rrText

EndProc
***************************************************************************

Proc CopyRandomRoadsTemplate
** The template is copied into a SC note

** Input a note number
  Input noteId $Set(@messageBundle, Get, 20)

** Read in RandomRoads template
  Let rrTemplate = $DataDir + "\Subroutines\QuickKeys\qkSupport\RandomRoadsTemplate.txt"
  Let rrText = $Read(@rrTemplate)

** Copy to note
  Let $Note(@noteId) = @rrText

EndProc
***************************************************************************

Proc OpenHelpNote
** Displays the help page as a note window

  If (@H = 0)
    Let H = 1
    Let U = 0
    Let L = 0
    Call makeHelpPage
    Call NoteWindow @helpPage 1
  Else
    Let H = 0
    Call NoteWindow
  EndIf
  Let $Key = 0
  Let U = 0

EndProc
****************************************************************************

Proc OpenUtilityNote
** Displays the utility menu as a note window

  If (@U = 0) ** Create message for utility menu
    Call makeUtilityMenu
    Call NoteWindow @utilityMenu 1
    Let U = 1
  Else
    Call NoteWindow
    Let U = 0
  EndIf
  Let $Key = 0
  Let H = 0
  Let L = 0

EndProc
****************************************************************************

Proc DisplayFullScreen
** Toggle full screen mode

  If (@F = 0)
    Let F = 1
    Call $View(show,"Full Screen")
  Else
    Let F = 0
    Call $View(hide,"Full Screen")
  EndIf
  NoteBox "." ** Necessray to select the current layout so QK continues to work
  NoteBox

EndProc
****************************************************************************

Proc ToggleQuickKeys
** Turn all Quick Keys on or off

  If (@x0 = 0)
    Let x0 = 1 ** activate all Quick keys
  Else
    Let x0 = 0 ** deactivate all Quick keys
  EndIf
  Let $Key = 0
  Let U = 0
  Let H = 0
  Let L = 0

EndProc
****************************************************************************

Proc ToggleToolBars
** Toggles the display of the items in ViewList

  Let i = 0
  While (@i < $Set(@ViewList, Count))
    Let temp = $Set(@ViewList, get, @i)
    If (@V = 1)
      Call $View(Hide, @temp)
    Else
      Call $View(Show, @temp)
    EndIf

    Let i = @i + 1
  EndWhile

  If (@V = 1)
    Let V = 0
  Else
    Let V = 1
  EndIf

EndProc
***************************************************************************

Proc ProcessorAdjustment
** Retrieves a bit of info about the computer being used

Echo Phake Physics adjustment for processor speed

* Call $System("%homepath%\AppData\Roaming\TrainPlayer\Subroutines\QuickKeys\qkSupport\ProcessorInfo.bat") ** This is the WMIC command

Let xCSLoc = $DataDir + "\Reports\ProcessorInfo.txt"
If($File(@xCSLoc, Exists) = 1)
  Let xCSFile = $File(@xCSLoc, Open)
  While(1 = 1)
    Let xLine = $File(@xCSFile, ReadLine)
    If ($String(@xLine, StartsWith, "MaxClockSpeed") = 1)
      Call $String(@xLine, NextToken, "=")
      Let xPS = @xLine ** xPS is the processor speed
      Echo Processor speed: @xps
    EndIf
    If ($String(@xLine, StartsWith, "DeviceID") = 1)
      Call $String(@xLine, NextToken, "=")
      Let xCPU = @xCPU + 1 ** xCPU is the number of processors
      Echo Number of processors: @xCPU
    EndIf
    If (@xLine = "EOF")
      Call $File(@xCSFile, Close)
      Break
    EndIf
  EndWhile
Else
  Let xPS = 2500
  Let xCPU = 1
  Echo ProcessorInfo.txt is missing
EndIf
Let xCurve = 0,1.0,1.5,1.75,2.0,2.25,2.5,2.75,3.0, ** Power of computer as processors are added
Let xCS = @xPS * $Set(@xCurve, Get, @xCPU)

EndProc
****************************************************************************
