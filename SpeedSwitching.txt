** SpeedSwitching version 4
** Includes Phake Physics


If (%1 = SetUp)

** SpeedSwitching items
  Let x1 = 1 ** Turn on speed switching

** PhakePhysics items
  Let x2 = 0 ** Turn off phake physics
  Let sBumpSpeed = 0
  Let sB = 0 ** 0 is off
  Let sT = 0 ** 0 is off

  Echo SpeedSwitching Version 4

EndIf

** %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   Speed Switching   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% **


Proc EmergencyStop

  Let $Train($Train, Speed) = 0
  Let sBumpSpeed = 0
  Echo Emergency stop!
  Call PhakePhysicsNeutral

EndProc
****************************************************************************

Proc SpeedSwitchingAutoFollow

  View "Auto-Follow"
  If ($Setting(AutoFollow) = 1)
    Echo Auto Follow is On.
  Else
    Echo Auto Follow is Off.
  EndIf

EndProc
****************************************************************************

Proc SpeedSwitchingThrottle

  Let sSpeed = $Speed

  If(@sSpeed < @maximumTrainSpeed)
    Let sSpeed = @sSpeed + 1
    Speed @sSpeed
  EndIf
  Echo Speed is @sSpeed

EndProc
****************************************************************************

Proc SpeedSwitchingStop

  Let sSpeed = $Speed

  If (@sSpeed <= @sCoupleSpeed)
    Let sSpeed = 0
  ElseIf (@sSpeed < @sCoupleSpeed + 5)
    Let sSpeed = @sCoupleSpeed
  Else
    Let sSpeed = @sSpeed - 5
  EndIf
  Speed @sSpeed
  Echo Speed is @sSpeed

EndProc
****************************************************************************

Proc SpeedSwitchingGo

  Let sCoupleSpeed = $Setting(Coupling Speed) - 1
  Let sSpeed = $Speed

  If (@sSpeed < @sCoupleSpeed)
    Let sSpeed = @sCoupleSpeed
  ElseIf (@sSpeed > @maximumTrainSpeed - 5)
    Let sSpeed = @maximumTrainSpeed
  Else
    Let sSpeed = @sSpeed + 5
  EndIf
  Speed @sSpeed
  Echo Speed is @sSpeed

EndProc
****************************************************************************

Proc SpeedSwitchingReverse

  Let sSpeed = $Speed

  Speed 0
  Let sDir = $Train($Train, Direction)
  If(@sDir = "F")
    Let sDir = "R"
  Else
    Let sDir = "F"
  EndIf
  On Stop
    Let $Train($Train, Direction) = @sDir
    After 00:00:01
    Speed @sSpeed
    Echo Direction $Train($Train, Direction). Speed is @sSpeed

EndProc
****************************************************************************

** %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   Phake Physics   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% **

Proc TogglePhakePhysics

  If(@x2 = 0) ** PP is not active
    Let xBox = $Set(@messageBundle, Get, 0)
    Call $MsgBox(@xBox)
    Let x2 = 1 ** activate phake physics
    Call ProcessorAdjustment

  Else
    Let xBox = $Set(@messageBundle, Get, 1)
    Call $MsgBox(@xBox)
    Let x2 = 0 ** deactivate PP
    Let sB = 0
    Let sT = 0
  EndIf

  Let $Key = 0
  Let U = 0

EndProc
****************************************************************************

Proc LineDelay
** linear delay for physics simulation
** Linear speed change, slope determined by sB or sT

Let iB = @sMass * @xCS / 1.0
Let iT = @sMass * @xCS / 1.3
Let iX = @sB * 6
Let iY = @sT * 6

While (@sB > 0) ** loop for braking
  Let iB = @iB - @iX
  If(@iB < 0)
    Break
  EndIf
EndWhile
While (@sT > 0) ** loop for accelerating
  Let iT = @iT - @iY
  If(@iT < 0)
    Break
  EndIf
EndWhile

EndProc
****************************************************************************

Proc SlopeDelay

** curved delay for physics simulation
** The faster a train goes, the slower it accelerates
** The slower a train goes, the faster it brakes
** Someday I'll do this

EndProc
****************************************************************************

Proc PhakePhysicsNeutral

  Echo Throttle set to neutral

  Let i = @sT + 1
  While(@i > 0)
    Let sT = 0
    Let i = @i - 1
  EndWhile
  Let i = @sB + 1
  While(@i > 0)
    Let sB = 0
    Let i = @i - 1
  EndWhile

EndProc
****************************************************************************

Proc PhakePhysicsReverse

  If ($Speed = 0)
    Let sDir = $Train($Train, Direction)
    If(@sDir = "F")
      Let sDir = "R"
    Else
      Let sDir = "F"
    EndIf
    Let $Train($Train, Direction) = @sDir
    Echo Direction $Train($Train, Direction)
  EndIf

EndProc
****************************************************************************

Proc PhakePhysicsBrake

  Let sMass = $Train($Train, Length)
  Let sT = 0 ** turn throttle off
  If (@sB = 0) ** are the brakes off?
    Let sB = 1
  Else
    Let sB = @sB + 1
  EndIf
  Echo Brake @sB

  While (@sB <> 0)
    If ($Key = 84) ** key t
      Let sB = 0
      Let sBumpSpeed = 0
      Break
    EndIf
    If ($Train($Train, Speed) = 0)
      Let sB = 0
      Echo Train stopped
      Break
    EndIf
    Let sBumpSpeed = $Speed - 1
    Call LineDelay
    Let $Train($Train, Speed) = @sBumpSpeed ** phrased this way, dont have to tweak accelfactor
  EndWhile

EndProc
****************************************************************************

Proc PhakePhysicsThrottle

  Let sMass = $Train($Train, Length)
  Let sB = 0 ** turn the brake off
  If (@sT = 0) ** is the throttle off?
    Let sT = 1
  Else
    Let sT = @sT + 1
  EndIf
  Echo Throttle @sT
  If($Speed = 0)
    Let $Train($Train, Speed) = 1
  EndIf

  While(@sT <> 0)
    If ($Key = 66) ** key b
      Let sT = 0
      Let sBumpSpeed = 0
      Break
    EndIf
    If ($Key = 75) ** the k key for kick
      Let sT = 0
      Let sBumpSpeed = 0
      Break
    EndIf
    If ($Train($Train, Speed) = @maximumTrainSpeed)
      Let sT = 0
      Echo Maximum speed
      Break
    EndIf

    Let sBumpSpeed = $Train($Train, Speed) + 1
    Call LineDelay
    Let $Train($Train, Speed) = @sBumpSpeed

    If ($Train($Train, Speed) = 0) ** if the train hits something and stops
      Call PhakePhysicsNeutral
    EndIf
  EndWhile

EndProc
****************************************************************************
