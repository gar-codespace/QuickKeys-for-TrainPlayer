** DropKick version 3


If (%1 = SetUp)

  Let x3 = 1
  Echo DropKick Version 3
  
EndIf
****************************************************************************

Proc Scrubber
** Remove all the kick motors from the layout

Echo Delete the KickMotors.
Let kThisTrain = $Train
Let kKickMotors = $Ops(find,Cars.AAR,"EQDK",Car)
Let i = $Set(@kKickMotors, Count)
While ($Set(@kKickMotors, Count) <> 0)
  Let kTemp = $String(@kKickMotors, NextToken)
  Train @kTemp
  Train car @kTemp
  "Train" "Car" "Delete Car"
EndWhile
Echo @i KickMotors deleted.

Train @kThisTrain

** Let kThisTrain = $Train
** let kKickMotors = $ops(find, Cars.AAR, all, Car_ID)
** Let i = 0
** While ($Set(@kKickMotors, Count) <> 0)
**   Let kCarId = $String(@kKickMotors, NextToken)
**   Let kCarAar = $Car(@kCarId, AAR)
**   If (@kCarAar = "EQDK")
**     ** Train @kCarId
**     Train car @kCarId
**     "Train" "Car" "Delete Car"
**     Let i = @i + 1
**   EndIf
** EndWhile

EndProc
****************************************************************************

Proc SpeedCheck
** If the selected train is stopped, call Scrubber

If ($Train($Train, Speed) = 0)

  Let U = 1 ** So ProcY is not run when Y is pressed

  Let xMessage = $Set(@messageBundle, Get, 2)
  Let kCleanToggle = $MsgBox(yn, @xMessage)
  If (@kCleanToggle = 1)
    Call Scrubber
    Let x3 = 1
  EndIf
  Let kCleanToggle = 0

  Let U = 0

EndIf

EndProc
****************************************************************************

Proc KickCheck
** Test if selected car is an engine

Let kAar = $Car($Car, AAR)
IF ($String(@kAar, StartsWith, "E") = 1)
  Echo Can't let an engine go!
  Let x3 = 1
  Exit
EndIf

EndProc
****************************************************************************

Proc FindEngineAndCarPosition
** Find the engine and cut car relative to each other
  
  Let kTemp = $Train($Train, CarLabels)
  Let kTrainCount = $Set(@kTemp, Count)
  
  Let i = 0
  While (@i < @kTrainCount)
    Let kTestLabel = $Set(@kTemp, Get, @i)
    Let kTestAAR = $Car(@kTestLabel, AAR)

    If ($String(@kTestAAR, StartsWith, "E") = 1)
    If ($String(@kTestAAR, Contains, "EQDK") = 0)
      Let kEngineLabel = @kTestLabel
      Let E = @i ** E is position of Engine in train
    EndIf
    EndIf

    If (@kTestLabel = $Car)
      Let C = @i ** C is position of selected Car in train
    EndIf
    Let i = @i + 1
  EndWhile

EndProc
****************************************************************************

Proc CutOffCars
** Add the kick moter and cut the train

Train "Add Car" "diesel"
Let $Car($Car, ShowLabel) = 0
** Let $Car($Car, Dest) = "~"
Let $Car($Car, Label) = "."
Train Car $Set(@kTemp, Get, @kCarPos)
train "uncouple"

EndProc
****************************************************************************

Proc DropKickKick
** Kick em

  Let x3 = 2

  Call SpeedCheck
  Call KickCheck
  Call FindEngineAndCarPosition

  Let TrainDirection = $Train($Train, Direction)

  If (@C - @E > 0) ** Car behind Engine
  If ($String(@TrainDirection, contains, R) = 1)
    Echo Kick 'Em!
    Let kCarPos = @C - 1
    Call CutOffCars     
  Else
    Echo Wrong direction to kick.
  Endif
  EndIf

  If (@C - @E < 0) ** Engine behind Car
  If ($String(@TrainDirection, contains, F) = 1)
    Echo Kick 'Em!
    Let kCarPos = @C + 1
    Call CutOffCars
  Else
    Echo Wrong direction to kick.
  Endif
  EndIf

  Train @kEngineLabel

  Let x3 = 1

EndProc
****************************************************************************

Proc DropKickDrop
** Drop em

  Let x3 = 2

  Call SpeedCheck
  Call KickCheck
  Call FindEngineAndCarPosition

  Let TrainDirection = $Train($Train, Direction)

  Let dropSpeed = $Train($Train, Speed) - 1
  Let dropCar = $Car

  If (@C - @E < 0) ** Engine behind Car
  If ($String(@TrainDirection, contains, R) = 1)
    Echo Let 'Em Go!
    Let kCarPos = @C + 1
    Call CutOffCars
  Else
    Echo Wrong direction to drop.
  EndIf
  EndIf

  If (@C - @E > 0) ** Car behind Engine
  If ($String(@TrainDirection, contains, F) = 1)
    Echo Let 'Em Go!
    Let kCarPos = @C - 1
    Call CutOffCars
  Else
    Echo Wrong direction to drop.
  EndIf
  EndIf

  Let $Train(@dropCar, Speed) = @dropSpeed
  Let x3 = 1

EndProc
****************************************************************************
